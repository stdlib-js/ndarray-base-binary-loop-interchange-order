{
  "version": 3,
  "sources": ["../lib/sort2ins.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Simultaneously sorts two arrays based on the sort order of the first array using insertion sort.\n*\n* ## Notes\n*\n* -   The first array is sorted in increasing order according to absolute value.\n* -   The algorithm has space complexity `O(1)` and worst case time complexity `O(N^2)`.\n* -   The algorithm is efficient for small arrays (typically `N <= 20``) and is particularly efficient for sorting arrays which are already substantially sorted.\n* -   The algorithm is **stable**, meaning that the algorithm does **not** change the order of array elements which are equal or equivalent.\n* -   The input arrays are sorted in-place (i.e., the input arrays are mutated).\n*\n* @private\n* @param {Array} x - first array\n* @param {Array} y - second array\n* @returns {void}\n*\n* @example\n* var x = [ -4, -2, 3, 1 ];\n* var y = [ 0, 1, 2, 3 ];\n*\n* sort2ins( x, y );\n*\n* console.log( x );\n* // => [ 1, -2, 3, -4 ]\n*\n* console.log( y );\n* // => [ 3, 1, 2, 0 ]\n*/\nfunction sort2ins( x, y ) {\n\tvar avx;\n\tvar aux;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tix = 1;\n\tiy = 1;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < x.length; i++ ) {\n\t\tvx = x[ ix ];\n\t\tavx = ( vx < 0 ) ? -vx : vx;\n\n\t\tvy = y[ iy ];\n\n\t\tjx = ix - 1;\n\t\tjy = iy - 1;\n\n\t\t// Shift all larger values to the left of the current element to the right...\n\t\twhile ( jx >= 0 ) {\n\t\t\tux = x[ jx ];\n\t\t\taux = ( ux < 0 ) ? -ux : ux;\n\t\t\tif ( aux <= avx ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[ jx+1 ] = ux;\n\t\t\ty[ jy+1 ] = y[ jy ];\n\t\t\tjx -= 1;\n\t\t\tjy -= 1;\n\t\t}\n\t\tx[ jx+1 ] = vx;\n\t\ty[ jy+1 ] = vy;\n\t\tix += 1;\n\t\tiy += 1;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = sort2ins;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar copy = require( '@stdlib/array-base-copy-indexed' );\nvar take = require( '@stdlib/array-base-take' );\nvar filled = require( '@stdlib/array-base-filled' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar sort2ins = require( './sort2ins.js' );\n\n\n// VARIABLES //\n\n// Number of arrays:\nvar N = 3;\n\n\n// MAIN //\n\n/**\n* Reorders ndarray dimensions and associated strides for loop interchange.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **sh**: dimensions sorted in loop order.\n*     -   **sx**: first input ndarray strides sorted in loop order.\n*     -   **sy**: second input ndarray strides sorted in loop order.\n*     -   **sz**: output ndarray strides sorted in loop order.\n*\n* @param {NonNegativeIntegerArray} sh - array dimensions\n* @param {IntegerArray} sx - first input array stride lengths\n* @param {IntegerArray} sy - second input array stride lengths\n* @param {IntegerArray} sz - output array stride lengths\n* @returns {Object} loop interchange data\n*\n* @example\n* var sh = [ 2, 3, 4 ];\n*\n* var sx = [ 12, 4, 1 ]; // row-major\n* var sy = [ 24, 8, 1 ]; // row-major\n* var sz = [ 1, -2, 6 ]; // column-major\n*\n* var o = loopOrder( sh, sx, sy, sz );\n* // returns {...}\n*\n* var ssh = o.sh;\n* // returns [ 4, 3, 2 ]\n*\n* var ssx = o.sx;\n* // returns [ 1, 4, 12 ]\n*\n* var ssy = o.sy;\n* // returns [ 1, 8, 24 ]\n*\n* var ssz = o.sz;\n* // returns [ 6, -2, 1 ]\n*/\nfunction loopOrder( sh, sx, sy, sz ) {\n\tvar idx;\n\tvar tmp;\n\tvar max;\n\tvar len;\n\tvar arr;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar i;\n\tvar j;\n\n\t// Initialize a loop interchange index array for generating a loop order permutation:\n\tidx = zeroTo( sh.length );\n\n\t// Determine the order (layout) of each array:\n\tox = strides2order( sx );\n\toy = strides2order( sy );\n\toz = strides2order( sz );\n\n\t// Determine which array should be used to generate the loop order:\n\ttmp = filled( [], 4 );\n\ttmp[ ox ].push( sx );\n\ttmp[ oy ].push( sy );\n\ttmp[ oz ].push( sz );\n\tmax = tmp[ 0 ].length;\n\tif ( max === N ) {\n\t\t// If all arrays are \"disorganized\", then just use the first array, as, generally, each array is likely to be as un-ideal as every other:\n\t\tarr = sx;\n\t} else if ( max === N-1 ) {\n\t\t// If all but one array is \"disorganized\", find the \"organized\" array...\n\t\tfor ( i = 1; i < 4; i++ ) {\n\t\t\tif ( tmp[ i ].length ) {\n\t\t\t\tarr = tmp[ i ][ 0 ];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Find the layout which is most common...\n\t\tj = 0;\n\t\tfor ( i = 1; i < 4; i++ ) {\n\t\t\tlen = tmp[ i ].length;\n\t\t\tif ( len >= max ) {\n\t\t\t\tmax = len;\n\t\t\t\tj = i;\n\t\t\t}\n\t\t}\n\t\t// Use the strides of the first array having the most common layout:\n\t\tarr = tmp[ j ][ 0 ];\n\t}\n\t// Sort array strides in increasing order (of magnitude):\n\tarr = copy( arr );\n\tsort2ins( arr, idx );\n\n\t// Permute the shape and array strides based on the sorted strides:\n\tsh = take( sh, idx );\n\tsx = ( sx === arr ) ? arr : take( sx, idx );\n\tsy = ( sy === arr ) ? arr : take( sy, idx );\n\tsz = ( sz === arr ) ? arr : take( sz, idx );\n\n\treturn {\n\t\t'sh': sh,\n\t\t'sx': sx,\n\t\t'sy': sy,\n\t\t'sz': sz\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = loopOrder;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reorder ndarray dimensions and associated strides for loop interchange.\n*\n* @module @stdlib/ndarray-base-binary-loop-interchange-order\n*\n* @example\n* var binaryLoopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\n*\n* var sh = [ 2, 3, 4 ];\n*\n* var sx = [ 12, 4, 1 ]; // row-major\n* var sy = [ 24, 8, 1 ]; // row-major\n* var sz = [ 1, -2, 6 ]; // column-major\n*\n* var o = loopOrder( sh, sx, sy, sz );\n* // returns {...}\n*\n* var ssh = o.sh;\n* // returns [ 4, 3, 2 ]\n*\n* var ssx = o.sx;\n* // returns [ 1, 4, 12 ]\n*\n* var ssy = o.sy;\n* // returns [ 1, 8, 24 ]\n*\n* var ssz = o.sz;\n* // returns [ 6, -2, 1 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAkDA,SAASC,EAAUC,EAAGC,EAAI,CACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,IAJAP,EAAK,EACLC,EAAK,EAGCM,EAAI,EAAGA,EAAIX,EAAE,OAAQW,IAAM,CAUhC,IATAH,EAAKR,EAAGI,CAAG,EACXF,EAAQM,EAAK,EAAM,CAACA,EAAKA,EAEzBC,EAAKR,EAAGI,CAAG,EAEXC,EAAKF,EAAK,EACVG,EAAKF,EAAK,EAGFC,GAAM,IACbI,EAAKV,EAAGM,CAAG,EACXH,EAAQO,EAAK,EAAM,CAACA,EAAKA,EACpB,EAAAP,GAAOD,KAGZF,EAAGM,EAAG,CAAE,EAAII,EACZT,EAAGM,EAAG,CAAE,EAAIN,EAAGM,CAAG,EAClBD,GAAM,EACNC,GAAM,EAEPP,EAAGM,EAAG,CAAE,EAAIE,EACZP,EAAGM,EAAG,CAAE,EAAIE,EACZL,GAAM,EACNC,GAAM,CACP,CACD,CAKAP,EAAO,QAAUC,ICjGjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,4BAA6B,EAC/CC,EAAO,QAAS,iCAAkC,EAClDC,EAAO,QAAS,yBAA0B,EAC1CC,EAAS,QAAS,2BAA4B,EAC9CC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAW,IAMXC,EAAI,EA6CR,SAASC,EAAWC,EAAIC,EAAIC,EAAIC,EAAK,CACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAgBJ,GAbAT,EAAMZ,EAAQQ,EAAG,MAAO,EAGxBS,EAAKb,EAAeK,CAAG,EACvBS,EAAKd,EAAeM,CAAG,EACvBS,EAAKf,EAAeO,CAAG,EAGvBE,EAAMV,EAAQ,CAAC,EAAG,CAAE,EACpBU,EAAKI,CAAG,EAAE,KAAMR,CAAG,EACnBI,EAAKK,CAAG,EAAE,KAAMR,CAAG,EACnBG,EAAKM,CAAG,EAAE,KAAMR,CAAG,EACnBG,EAAMD,EAAK,CAAE,EAAE,OACVC,IAAQR,EAEZU,EAAMP,UACKK,IAAQR,EAAE,GAErB,IAAMc,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAKP,EAAKO,CAAE,EAAE,OAAS,CACtBJ,EAAMH,EAAKO,CAAE,EAAG,CAAE,EAClB,KACD,MAEK,CAGN,IADAC,EAAI,EACED,EAAI,EAAGA,EAAI,EAAGA,IACnBL,EAAMF,EAAKO,CAAE,EAAE,OACVL,GAAOD,IACXA,EAAMC,EACNM,EAAID,GAINJ,EAAMH,EAAKQ,CAAE,EAAG,CAAE,CACnB,CAEA,OAAAL,EAAMf,EAAMe,CAAI,EAChBX,EAAUW,EAAKJ,CAAI,EAGnBJ,EAAKN,EAAMM,EAAII,CAAI,EACnBH,EAAOA,IAAOO,EAAQA,EAAMd,EAAMO,EAAIG,CAAI,EAC1CF,EAAOA,IAAOM,EAAQA,EAAMd,EAAMQ,EAAIE,CAAI,EAC1CD,EAAOA,IAAOK,EAAQA,EAAMd,EAAMS,EAAIC,CAAI,EAEnC,CACN,GAAMJ,EACN,GAAMC,EACN,GAAMC,EACN,GAAMC,CACP,CACD,CAKAZ,EAAO,QAAUQ,ICjGjB,IAAIe,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_sort2ins", "__commonJSMin", "exports", "module", "sort2ins", "x", "y", "avx", "aux", "ix", "iy", "jx", "jy", "vx", "vy", "ux", "i", "require_main", "__commonJSMin", "exports", "module", "zeroTo", "copy", "take", "filled", "strides2order", "sort2ins", "N", "loopOrder", "sh", "sx", "sy", "sz", "idx", "tmp", "max", "len", "arr", "ox", "oy", "oz", "i", "j", "main"]
}
