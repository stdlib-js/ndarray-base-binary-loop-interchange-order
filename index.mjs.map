{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-loop-interchange-order';\n\n\n// MAIN //\n\n/**\n* Reorders ndarray dimensions and associated strides for loop interchange.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **sh**: dimensions sorted in loop order.\n*     -   **sx**: first input ndarray strides sorted in loop order.\n*     -   **sy**: second input ndarray strides sorted in loop order.\n*     -   **sz**: output ndarray strides sorted in loop order.\n*\n* @param {NonNegativeIntegerArray} sh - array dimensions\n* @param {IntegerArray} sx - first input array stride lengths\n* @param {IntegerArray} sy - second input array stride lengths\n* @param {IntegerArray} sz - output array stride lengths\n* @returns {Object} loop interchange data\n*\n* @example\n* var sh = [ 2, 3, 4 ];\n*\n* var sx = [ 12, 4, 1 ]; // row-major\n* var sy = [ 24, 8, 1 ]; // row-major\n* var sz = [ 1, -2, 6 ]; // column-major\n*\n* var o = binaryLoopOrder( sh, sx, sy, sz );\n* // returns {...}\n*\n* var ssh = o.sh;\n* // returns [ 4, 3, 2 ]\n*\n* var ssx = o.sx;\n* // returns [ 1, 4, 12 ]\n*\n* var ssy = o.sy;\n* // returns [ 1, 8, 24 ]\n*\n* var ssz = o.sz;\n* // returns [ 6, -2, 1 ]\n*/\nfunction binaryLoopOrder( sh, sx, sy, sz ) {\n\tvar tmp = loopOrder( sh, [ sx, sy, sz ] );\n\treturn {\n\t\t'sh': tmp[ 0 ],\n\t\t'sx': tmp[ 1 ],\n\t\t'sy': tmp[ 2 ],\n\t\t'sz': tmp[ 3 ]\n\t};\n}\n\n\n// EXPORTS //\n\nexport default binaryLoopOrder;\n"],"names":["binaryLoopOrder","sh","sx","sy","sz","tmp","loopOrder"],"mappings":";;uGAmEA,SAASA,EAAiBC,EAAIC,EAAIC,EAAIC,GACrC,IAAIC,EAAMC,EAAWL,EAAI,CAAEC,EAAIC,EAAIC,IACnC,MAAO,CACNH,GAAMI,EAAK,GACXH,GAAMG,EAAK,GACXF,GAAME,EAAK,GACXD,GAAMC,EAAK,GAEb"}